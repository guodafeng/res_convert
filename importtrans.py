#!/usr/local/bin/python
# -*- coding:utf-8 -*-
import sys
import os
import re
import logging
import argparse
from openpyxl import Workbook
import collections


import constants
import utility 
import picksource

T2_COL_NAME = (
        'RefName',
	'ModOP',
	'Info',
	'ZoneType',
	'IsMono',
	'IsUK',
	'IsGSM',
	'English_US',
	'French_CA',
	'LatinESP',
	'English_CA',
	'English',
	'CHINE_NEW',
	'Brazilian',
	'Croatian',
	'Czech',
	'French',
	'German',
	'Greek',
	'Hebrew',
	'Hungarian',
	'Polish',
	'Romanian',
	'Spanish',
	'Serbian',
	'Slovak',
	'Slovenia',
	'Italian',
	'Turkish',
	'Dutch',
	'Macedonian',
	'Bulgarian',
	'Catalan',
	'Russian',
	'Malay',
	'Danish',
	'CHINE_OLD',
	'Swedish',
	'Arabic',
	'Vietnamese')
ID_TITLE = 'RefName'
FEATURE_TITLE = 'ModOP'
VALUE_TITLE = 'English_US' 

class SourceItemT2(object):
    def __init__(self, old_id, value, feature, textid):
        """
        textid: TextID in source Table, trail uuid to be unique
        value: string in source file
        old_id: old format id with name plus uniq random id
        feature: feature it belongs to
        """
        self.value = value
        self.old_id = old_id
        self.feature = feature
        self.textid = textid


def load_t2_string_table(xlsx):
    """
    load t2 string table, which contains all languages
    """
    from openpyxl import load_workbook
    wb = load_workbook(filename = xlsx)
    ws = wb.get_sheet_by_name('MESSAGE')
    
    rows = ws.rows
    col_map = {name:index for index, name in enumerate(T2_COL_NAME)}
    t2_map = {}
    for row in rows:
        t2_item = SourceItemT2('', row[col_map[VALUE_TITLE]].value,
                row[col_map[FEATURE_TITLE]].value,
                row[col_map[ID_TITLE]].value)
        t2_map[t2_item.textid] = t2_item
        
    return t2_map

def create_id_mapping(t2_map, source_map):
    """
    map the t2 id with old id in DB
    return: list conatils items which old id is not in t2_map
    """
    not_in_t2 = [] # items of old source but not in t2 source
    for fp_id in source_map:
       source_item = source_map[fp_id]
       new_id = create_new_id(source_item.name, source_item.res_file)
       if new_id not in t2_map:
           not_in_t2.append(source_item)
       else:
           t2_map[new_id].old_id = fp_id
           if t2_map[new_id].value != source_item.value:
               print("Warning: The value has been changed.")
               print("t2_id(%40s): %s" % (new_id, t2_map[new_id].value))
               print("old_id(%39s): %s" % (fp_id, source_item.value))
    
    
    print(len(not_in_t2))
    not_in_t2.sort(key=lambda x:x.res_file)
    print(len(not_in_t2))
    return not_in_t2


def create_new_id(name, res_file):
    src_path = os.path.splitext(res_file)[0]
    sep = r'[/\\]'
    parts = re.split(sep, src_path)
    #remove apps
    if parts[0] == 'apps':
        parts = parts[1:]
    parts += (name,)
    return ':'.join(parts)
    

def map_source_t2(t2_file, old_sources_file):
    source_map = \
    picksource.SourceToXlsx.load_source_xlsx(old_sources_file)
    t2_map = load_t2_string_table(t2_file)
    not_in_t2 = create_id_mapping(t2_map, source_map)

    t2_items = [t2_map[key] for key in sorted(t2_map)]
    save_t2_source(t2_items,'source_t2.xlsx')

    new_items = [t2_map[key] for key in sorted(t2_map) if \
            t2_map[key].old_id]
    save_t2_source(new_items,'new_added_t2.xlsx')
    
    picksource.SourceToXlsx.save_source_xlsx(not_in_t2,
    'not_int_t2.xlsx')


def save_t2_source(t2_items, xlsx):
    col_map = constants.col_in_xlsx(constants.T2_SOURCES_COLUMNS)
    def add_head_row(ws, row_num):
        for col in constants.T2_SOURCES_COLUMNS:
            idx = col_map[col] + str(row_num)
            ws[idx] = col

    def add_res_row(ws, res, row_num):
        idx = col_map[constants.TEXTID] + str(row_num)
        ws[idx] = res.textid

        idx = col_map[constants.ENGLISHGB] + str(row_num)
        ws[idx] = res.value

        idx = col_map[constants.OLDID] + str(row_num)
        ws[idx] = res.old_id
        
        idx = col_map[constants.FEATURE] + str(row_num)
        ws[idx] = res.feature

    def save_source_xlsx(src_items, xlsx):
        wb = Workbook()
        ws = wb.active
        row_num = 1

        ws['A1'] = ('Generated by scripts for T2 string import')
        add_head_row(ws, row_num)
        row_num += 1

        for src in src_items:
            add_res_row(ws, src, row_num)
            row_num+=1

        wb.save(xlsx)

    save_source_xlsx(t2_items, xlsx)

map_source_t2('string_src/wk42 FC strings.xlsx',
        'string_src/sources-inDB.xlsx')

